<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    
     <!-- 启用springmvc注解 -->
	<context:annotation-config />
	
	<!-- spring扫描dao、service -->
    <context:component-scan base-package="com.cfang" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
	</context:component-scan>
	
	<!-- 加载资源文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    
<!--     <bean id="propertyConfigure" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  -->
<!-- 	  <property name="locations">  -->
<!-- 		   <list>  -->
<!-- 		    <value>classpath:jdbc.properties</value>  -->
<!-- 		   </list>  -->
<!-- 	  </property>  -->
<!-- 	</bean> -->
    
     <!-- 配置druid数据源 -->
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 --> 
		<property name="initialSize" value="1" /> 
		<property name="minIdle" value="1" /> 
		<property name="maxActive" value="10" />
		<!-- 配置获取连接等待超时的时间 --> 
  		<property name="maxWait" value="10000" />
  		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
  		<property name="timeBetweenEvictionRunsMillis" value="60000" />
  		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
  		<property name="minEvictableIdleTimeMillis" value="300000" />
  		<property name="testWhileIdle" value="true" />
  		<!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
		<property name="testOnBorrow" value="true" /> 
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
		 <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
<!--   		<property name="poolPreparedStatements" value="true" />  -->
<!--   		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
  		<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
  		<property name="defaultAutoCommit" value="true" />
	 	<!-- 验证连接有效与否的SQL，不同的数据配置不同 --> 
	  	<property name="validationQuery" value="select 1 " /> 
	  	<!-- 配置监控统计拦截的filters -->
	 	<property name="filters" value="stat" /> 
<!-- 	 	<property name="proxyFilters"/>  -->
    </bean>
    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
	  	<property name="statementExecutableSqlLogEnable" value="false" /> 
	</bean>
	
	<!-- 创建SqlSessionFactory -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="masterDataSource" />
		<!-- 指定mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mappers/mybatis-config.xml" />
 		<!-- 自动扫描mapper.xml文件 -->  
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"></property>  
	</bean>
	<!-- SqlSessionTemplate -->
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
	
	<!-- 映射接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cfang.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />
	</bean>
	
	<!-- 配置事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="masterDataSource"></property>
	</bean>
	
	<!-- 使用annotation注解方式配置事务 -->
	<!-- proxy-traget-class true对类进行代理，如果是false表示对接口进行代理,使用时需要在类或者方法上加上 @Transactional 注解。 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>